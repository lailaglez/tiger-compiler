//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g 2016-03-07 15:50:14

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace Syntaxis
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
public partial class TigerLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int AND=4;
	public const int AND_NODE=5;
	public const int ARRAY=6;
	public const int ARRAY_ACCESS_NODE=7;
	public const int ARRAY_INIT_NODE=8;
	public const int ARRAY_TYPE_DECLARATION_NODE=9;
	public const int ASCII_CODE=10;
	public const int ASSIGN=11;
	public const int ASSIGN_NODE=12;
	public const int AT=13;
	public const int BACKSLASH=14;
	public const int BREAK=15;
	public const int BREAK_NODE=16;
	public const int CALL_NODE=17;
	public const int CARET=18;
	public const int CLOSE_COMMENT=19;
	public const int COLON=20;
	public const int COMMA=21;
	public const int COMMENT=22;
	public const int DECLARATION_LIST_NODE=23;
	public const int DIGIT=24;
	public const int DIV_NODE=25;
	public const int DO=26;
	public const int DOUBLEQUOTE=27;
	public const int ELSE=28;
	public const int END=29;
	public const int EQUAL=30;
	public const int EQUAL_NODE=31;
	public const int ESC_SEQ=32;
	public const int EXPLICIT_VARIABLE_DECLARATION_NODE=33;
	public const int FIELD_DECLARATION_NODE=34;
	public const int FOR=35;
	public const int FOR_NODE=36;
	public const int FUNCTION=37;
	public const int FUNCTION_DECLARATION_BLOCK_NODE=38;
	public const int FUNCTION_DECLARATION_NODE=39;
	public const int GEQ=40;
	public const int GEQ_NODE=41;
	public const int GREATER=42;
	public const int GREATER_NODE=43;
	public const int ID=44;
	public const int ID_NODE=45;
	public const int IF=46;
	public const int IF_ELSE_NODE=47;
	public const int IF_NODE=48;
	public const int IMPLICIT_VARIABLE_DECLARATION_NODE=49;
	public const int IN=50;
	public const int INSTRUCTION_SEQUENCE_NODE=51;
	public const int INT_CONS=52;
	public const int INT_NODE=53;
	public const int LBRACE=54;
	public const int LBRACKET=55;
	public const int LEQ=56;
	public const int LEQ_NODE=57;
	public const int LESS=58;
	public const int LESS_NODE=59;
	public const int LET=60;
	public const int LETTER=61;
	public const int LET_NODE=62;
	public const int LPAR=63;
	public const int MINUS=64;
	public const int MINUS_NODE=65;
	public const int MULT_NODE=66;
	public const int NEG_NODE=67;
	public const int NEQUAL=68;
	public const int NIL=69;
	public const int NIL_NODE=70;
	public const int NOT_EQUAL_NODE=71;
	public const int OF=72;
	public const int OPEN_COMMENT=73;
	public const int OR=74;
	public const int OR_NODE=75;
	public const int PARAMETERS_NODE=76;
	public const int PARAMETER_DECLARATION_NODE=77;
	public const int PARENTHESES_NODE=78;
	public const int PERIOD=79;
	public const int PLUS=80;
	public const int PLUS_NODE=81;
	public const int PROCEDURE_DECLARATION_NODE=82;
	public const int PROGRAM_NODE=83;
	public const int RBRACE=84;
	public const int RBRACKET=85;
	public const int RECORD_ACCESS_NODE=86;
	public const int RECORD_FIELD_INIT_NODE=87;
	public const int RECORD_INIT_NODE=88;
	public const int RECORD_TYPE_DECLARATION_NODE=89;
	public const int RPAR=90;
	public const int SEMI=91;
	public const int SIMPLE_TYPE_DECLARATION_NODE=92;
	public const int SLASH=93;
	public const int STAR=94;
	public const int STRING_CONS=95;
	public const int STRING_NODE=96;
	public const int STRING_WS=97;
	public const int THEN=98;
	public const int TO=99;
	public const int TYPE=100;
	public const int TYPE_ACCESS_NODE=101;
	public const int TYPE_DECLARATION_BLOCK_NODE=102;
	public const int UNDERSCORE=103;
	public const int VAR=104;
	public const int VARIABLE_ACCESS_NODE=105;
	public const int VARIABLE_DECLARATION_BLOCK_NODE=106;
	public const int WHILE=107;
	public const int WHILE_NODE=108;
	public const int WS=109;

    // delegates
    // delegators

	public TigerLexer()
	{
		OnCreated();
	}

	public TigerLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public TigerLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 1);
		TraceIn("AND", 1);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:9:5: ( '&' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:9:7: '&'
			{
			DebugLocation(9, 7);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 1);
			LeaveRule("AND", 1);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_ARRAY();
	partial void LeaveRule_ARRAY();

	// $ANTLR start "ARRAY"
	[GrammarRule("ARRAY")]
	private void mARRAY()
	{
		EnterRule_ARRAY();
		EnterRule("ARRAY", 2);
		TraceIn("ARRAY", 2);
		try
		{
			int _type = ARRAY;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:10:7: ( 'array' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:10:9: 'array'
			{
			DebugLocation(10, 9);
			Match("array"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ARRAY", 2);
			LeaveRule("ARRAY", 2);
			LeaveRule_ARRAY();
		}
	}
	// $ANTLR end "ARRAY"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 3);
		TraceIn("ASSIGN", 3);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:11:8: ( ':=' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:11:10: ':='
			{
			DebugLocation(11, 10);
			Match(":="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 3);
			LeaveRule("ASSIGN", 3);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_AT();
	partial void LeaveRule_AT();

	// $ANTLR start "AT"
	[GrammarRule("AT")]
	private void mAT()
	{
		EnterRule_AT();
		EnterRule("AT", 4);
		TraceIn("AT", 4);
		try
		{
			int _type = AT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:12:4: ( '@' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:12:6: '@'
			{
			DebugLocation(12, 6);
			Match('@'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AT", 4);
			LeaveRule("AT", 4);
			LeaveRule_AT();
		}
	}
	// $ANTLR end "AT"

	partial void EnterRule_BACKSLASH();
	partial void LeaveRule_BACKSLASH();

	// $ANTLR start "BACKSLASH"
	[GrammarRule("BACKSLASH")]
	private void mBACKSLASH()
	{
		EnterRule_BACKSLASH();
		EnterRule("BACKSLASH", 5);
		TraceIn("BACKSLASH", 5);
		try
		{
			int _type = BACKSLASH;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:13:11: ( '\\\\' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:13:13: '\\\\'
			{
			DebugLocation(13, 13);
			Match('\\'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BACKSLASH", 5);
			LeaveRule("BACKSLASH", 5);
			LeaveRule_BACKSLASH();
		}
	}
	// $ANTLR end "BACKSLASH"

	partial void EnterRule_BREAK();
	partial void LeaveRule_BREAK();

	// $ANTLR start "BREAK"
	[GrammarRule("BREAK")]
	private void mBREAK()
	{
		EnterRule_BREAK();
		EnterRule("BREAK", 6);
		TraceIn("BREAK", 6);
		try
		{
			int _type = BREAK;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:14:7: ( 'break' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:14:9: 'break'
			{
			DebugLocation(14, 9);
			Match("break"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BREAK", 6);
			LeaveRule("BREAK", 6);
			LeaveRule_BREAK();
		}
	}
	// $ANTLR end "BREAK"

	partial void EnterRule_CARET();
	partial void LeaveRule_CARET();

	// $ANTLR start "CARET"
	[GrammarRule("CARET")]
	private void mCARET()
	{
		EnterRule_CARET();
		EnterRule("CARET", 7);
		TraceIn("CARET", 7);
		try
		{
			int _type = CARET;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:15:7: ( '^' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:15:9: '^'
			{
			DebugLocation(15, 9);
			Match('^'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CARET", 7);
			LeaveRule("CARET", 7);
			LeaveRule_CARET();
		}
	}
	// $ANTLR end "CARET"

	partial void EnterRule_CLOSE_COMMENT();
	partial void LeaveRule_CLOSE_COMMENT();

	// $ANTLR start "CLOSE_COMMENT"
	[GrammarRule("CLOSE_COMMENT")]
	private void mCLOSE_COMMENT()
	{
		EnterRule_CLOSE_COMMENT();
		EnterRule("CLOSE_COMMENT", 8);
		TraceIn("CLOSE_COMMENT", 8);
		try
		{
			int _type = CLOSE_COMMENT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:16:15: ( '*/' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:16:17: '*/'
			{
			DebugLocation(16, 17);
			Match("*/"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLOSE_COMMENT", 8);
			LeaveRule("CLOSE_COMMENT", 8);
			LeaveRule_CLOSE_COMMENT();
		}
	}
	// $ANTLR end "CLOSE_COMMENT"

	partial void EnterRule_COLON();
	partial void LeaveRule_COLON();

	// $ANTLR start "COLON"
	[GrammarRule("COLON")]
	private void mCOLON()
	{
		EnterRule_COLON();
		EnterRule("COLON", 9);
		TraceIn("COLON", 9);
		try
		{
			int _type = COLON;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:17:7: ( ':' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:17:9: ':'
			{
			DebugLocation(17, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COLON", 9);
			LeaveRule("COLON", 9);
			LeaveRule_COLON();
		}
	}
	// $ANTLR end "COLON"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 10);
		TraceIn("COMMA", 10);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:18:7: ( ',' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:18:9: ','
			{
			DebugLocation(18, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 10);
			LeaveRule("COMMA", 10);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_DO();
	partial void LeaveRule_DO();

	// $ANTLR start "DO"
	[GrammarRule("DO")]
	private void mDO()
	{
		EnterRule_DO();
		EnterRule("DO", 11);
		TraceIn("DO", 11);
		try
		{
			int _type = DO;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:19:4: ( 'do' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:19:6: 'do'
			{
			DebugLocation(19, 6);
			Match("do"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DO", 11);
			LeaveRule("DO", 11);
			LeaveRule_DO();
		}
	}
	// $ANTLR end "DO"

	partial void EnterRule_DOUBLEQUOTE();
	partial void LeaveRule_DOUBLEQUOTE();

	// $ANTLR start "DOUBLEQUOTE"
	[GrammarRule("DOUBLEQUOTE")]
	private void mDOUBLEQUOTE()
	{
		EnterRule_DOUBLEQUOTE();
		EnterRule("DOUBLEQUOTE", 12);
		TraceIn("DOUBLEQUOTE", 12);
		try
		{
			int _type = DOUBLEQUOTE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:20:13: ( '\\\"' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:20:15: '\\\"'
			{
			DebugLocation(20, 15);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOUBLEQUOTE", 12);
			LeaveRule("DOUBLEQUOTE", 12);
			LeaveRule_DOUBLEQUOTE();
		}
	}
	// $ANTLR end "DOUBLEQUOTE"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 13);
		TraceIn("ELSE", 13);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:21:6: ( 'else' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:21:8: 'else'
			{
			DebugLocation(21, 8);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 13);
			LeaveRule("ELSE", 13);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_END();
	partial void LeaveRule_END();

	// $ANTLR start "END"
	[GrammarRule("END")]
	private void mEND()
	{
		EnterRule_END();
		EnterRule("END", 14);
		TraceIn("END", 14);
		try
		{
			int _type = END;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:22:5: ( 'end' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:22:7: 'end'
			{
			DebugLocation(22, 7);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("END", 14);
			LeaveRule("END", 14);
			LeaveRule_END();
		}
	}
	// $ANTLR end "END"

	partial void EnterRule_EQUAL();
	partial void LeaveRule_EQUAL();

	// $ANTLR start "EQUAL"
	[GrammarRule("EQUAL")]
	private void mEQUAL()
	{
		EnterRule_EQUAL();
		EnterRule("EQUAL", 15);
		TraceIn("EQUAL", 15);
		try
		{
			int _type = EQUAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:23:7: ( '=' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:23:9: '='
			{
			DebugLocation(23, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUAL", 15);
			LeaveRule("EQUAL", 15);
			LeaveRule_EQUAL();
		}
	}
	// $ANTLR end "EQUAL"

	partial void EnterRule_FOR();
	partial void LeaveRule_FOR();

	// $ANTLR start "FOR"
	[GrammarRule("FOR")]
	private void mFOR()
	{
		EnterRule_FOR();
		EnterRule("FOR", 16);
		TraceIn("FOR", 16);
		try
		{
			int _type = FOR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:24:5: ( 'for' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:24:7: 'for'
			{
			DebugLocation(24, 7);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FOR", 16);
			LeaveRule("FOR", 16);
			LeaveRule_FOR();
		}
	}
	// $ANTLR end "FOR"

	partial void EnterRule_FUNCTION();
	partial void LeaveRule_FUNCTION();

	// $ANTLR start "FUNCTION"
	[GrammarRule("FUNCTION")]
	private void mFUNCTION()
	{
		EnterRule_FUNCTION();
		EnterRule("FUNCTION", 17);
		TraceIn("FUNCTION", 17);
		try
		{
			int _type = FUNCTION;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:25:10: ( 'function' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:25:12: 'function'
			{
			DebugLocation(25, 12);
			Match("function"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUNCTION", 17);
			LeaveRule("FUNCTION", 17);
			LeaveRule_FUNCTION();
		}
	}
	// $ANTLR end "FUNCTION"

	partial void EnterRule_GEQ();
	partial void LeaveRule_GEQ();

	// $ANTLR start "GEQ"
	[GrammarRule("GEQ")]
	private void mGEQ()
	{
		EnterRule_GEQ();
		EnterRule("GEQ", 18);
		TraceIn("GEQ", 18);
		try
		{
			int _type = GEQ;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:26:5: ( '>=' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:26:7: '>='
			{
			DebugLocation(26, 7);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GEQ", 18);
			LeaveRule("GEQ", 18);
			LeaveRule_GEQ();
		}
	}
	// $ANTLR end "GEQ"

	partial void EnterRule_GREATER();
	partial void LeaveRule_GREATER();

	// $ANTLR start "GREATER"
	[GrammarRule("GREATER")]
	private void mGREATER()
	{
		EnterRule_GREATER();
		EnterRule("GREATER", 19);
		TraceIn("GREATER", 19);
		try
		{
			int _type = GREATER;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:27:9: ( '>' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:27:11: '>'
			{
			DebugLocation(27, 11);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATER", 19);
			LeaveRule("GREATER", 19);
			LeaveRule_GREATER();
		}
	}
	// $ANTLR end "GREATER"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 20);
		TraceIn("IF", 20);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:28:4: ( 'if' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:28:6: 'if'
			{
			DebugLocation(28, 6);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 20);
			LeaveRule("IF", 20);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_IN();
	partial void LeaveRule_IN();

	// $ANTLR start "IN"
	[GrammarRule("IN")]
	private void mIN()
	{
		EnterRule_IN();
		EnterRule("IN", 21);
		TraceIn("IN", 21);
		try
		{
			int _type = IN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:29:4: ( 'in' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:29:6: 'in'
			{
			DebugLocation(29, 6);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IN", 21);
			LeaveRule("IN", 21);
			LeaveRule_IN();
		}
	}
	// $ANTLR end "IN"

	partial void EnterRule_LBRACE();
	partial void LeaveRule_LBRACE();

	// $ANTLR start "LBRACE"
	[GrammarRule("LBRACE")]
	private void mLBRACE()
	{
		EnterRule_LBRACE();
		EnterRule("LBRACE", 22);
		TraceIn("LBRACE", 22);
		try
		{
			int _type = LBRACE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:30:8: ( '{' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:30:10: '{'
			{
			DebugLocation(30, 10);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LBRACE", 22);
			LeaveRule("LBRACE", 22);
			LeaveRule_LBRACE();
		}
	}
	// $ANTLR end "LBRACE"

	partial void EnterRule_LBRACKET();
	partial void LeaveRule_LBRACKET();

	// $ANTLR start "LBRACKET"
	[GrammarRule("LBRACKET")]
	private void mLBRACKET()
	{
		EnterRule_LBRACKET();
		EnterRule("LBRACKET", 23);
		TraceIn("LBRACKET", 23);
		try
		{
			int _type = LBRACKET;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:31:10: ( '[' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:31:12: '['
			{
			DebugLocation(31, 12);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LBRACKET", 23);
			LeaveRule("LBRACKET", 23);
			LeaveRule_LBRACKET();
		}
	}
	// $ANTLR end "LBRACKET"

	partial void EnterRule_LEQ();
	partial void LeaveRule_LEQ();

	// $ANTLR start "LEQ"
	[GrammarRule("LEQ")]
	private void mLEQ()
	{
		EnterRule_LEQ();
		EnterRule("LEQ", 24);
		TraceIn("LEQ", 24);
		try
		{
			int _type = LEQ;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:32:5: ( '<=' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:32:7: '<='
			{
			DebugLocation(32, 7);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LEQ", 24);
			LeaveRule("LEQ", 24);
			LeaveRule_LEQ();
		}
	}
	// $ANTLR end "LEQ"

	partial void EnterRule_LESS();
	partial void LeaveRule_LESS();

	// $ANTLR start "LESS"
	[GrammarRule("LESS")]
	private void mLESS()
	{
		EnterRule_LESS();
		EnterRule("LESS", 25);
		TraceIn("LESS", 25);
		try
		{
			int _type = LESS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:33:6: ( '<' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:33:8: '<'
			{
			DebugLocation(33, 8);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESS", 25);
			LeaveRule("LESS", 25);
			LeaveRule_LESS();
		}
	}
	// $ANTLR end "LESS"

	partial void EnterRule_LET();
	partial void LeaveRule_LET();

	// $ANTLR start "LET"
	[GrammarRule("LET")]
	private void mLET()
	{
		EnterRule_LET();
		EnterRule("LET", 26);
		TraceIn("LET", 26);
		try
		{
			int _type = LET;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:34:5: ( 'let' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:34:7: 'let'
			{
			DebugLocation(34, 7);
			Match("let"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LET", 26);
			LeaveRule("LET", 26);
			LeaveRule_LET();
		}
	}
	// $ANTLR end "LET"

	partial void EnterRule_LPAR();
	partial void LeaveRule_LPAR();

	// $ANTLR start "LPAR"
	[GrammarRule("LPAR")]
	private void mLPAR()
	{
		EnterRule_LPAR();
		EnterRule("LPAR", 27);
		TraceIn("LPAR", 27);
		try
		{
			int _type = LPAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:35:6: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:35:8: '('
			{
			DebugLocation(35, 8);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LPAR", 27);
			LeaveRule("LPAR", 27);
			LeaveRule_LPAR();
		}
	}
	// $ANTLR end "LPAR"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 28);
		TraceIn("MINUS", 28);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:36:7: ( '-' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:36:9: '-'
			{
			DebugLocation(36, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 28);
			LeaveRule("MINUS", 28);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_NEQUAL();
	partial void LeaveRule_NEQUAL();

	// $ANTLR start "NEQUAL"
	[GrammarRule("NEQUAL")]
	private void mNEQUAL()
	{
		EnterRule_NEQUAL();
		EnterRule("NEQUAL", 29);
		TraceIn("NEQUAL", 29);
		try
		{
			int _type = NEQUAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:37:8: ( '<>' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:37:10: '<>'
			{
			DebugLocation(37, 10);
			Match("<>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEQUAL", 29);
			LeaveRule("NEQUAL", 29);
			LeaveRule_NEQUAL();
		}
	}
	// $ANTLR end "NEQUAL"

	partial void EnterRule_NIL();
	partial void LeaveRule_NIL();

	// $ANTLR start "NIL"
	[GrammarRule("NIL")]
	private void mNIL()
	{
		EnterRule_NIL();
		EnterRule("NIL", 30);
		TraceIn("NIL", 30);
		try
		{
			int _type = NIL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:38:5: ( 'nil' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:38:7: 'nil'
			{
			DebugLocation(38, 7);
			Match("nil"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NIL", 30);
			LeaveRule("NIL", 30);
			LeaveRule_NIL();
		}
	}
	// $ANTLR end "NIL"

	partial void EnterRule_OF();
	partial void LeaveRule_OF();

	// $ANTLR start "OF"
	[GrammarRule("OF")]
	private void mOF()
	{
		EnterRule_OF();
		EnterRule("OF", 31);
		TraceIn("OF", 31);
		try
		{
			int _type = OF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:39:4: ( 'of' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:39:6: 'of'
			{
			DebugLocation(39, 6);
			Match("of"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OF", 31);
			LeaveRule("OF", 31);
			LeaveRule_OF();
		}
	}
	// $ANTLR end "OF"

	partial void EnterRule_OPEN_COMMENT();
	partial void LeaveRule_OPEN_COMMENT();

	// $ANTLR start "OPEN_COMMENT"
	[GrammarRule("OPEN_COMMENT")]
	private void mOPEN_COMMENT()
	{
		EnterRule_OPEN_COMMENT();
		EnterRule("OPEN_COMMENT", 32);
		TraceIn("OPEN_COMMENT", 32);
		try
		{
			int _type = OPEN_COMMENT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:40:14: ( '/*' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:40:16: '/*'
			{
			DebugLocation(40, 16);
			Match("/*"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPEN_COMMENT", 32);
			LeaveRule("OPEN_COMMENT", 32);
			LeaveRule_OPEN_COMMENT();
		}
	}
	// $ANTLR end "OPEN_COMMENT"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 33);
		TraceIn("OR", 33);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:41:4: ( '|' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:41:6: '|'
			{
			DebugLocation(41, 6);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 33);
			LeaveRule("OR", 33);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_PERIOD();
	partial void LeaveRule_PERIOD();

	// $ANTLR start "PERIOD"
	[GrammarRule("PERIOD")]
	private void mPERIOD()
	{
		EnterRule_PERIOD();
		EnterRule("PERIOD", 34);
		TraceIn("PERIOD", 34);
		try
		{
			int _type = PERIOD;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:42:8: ( '.' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:42:10: '.'
			{
			DebugLocation(42, 10);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PERIOD", 34);
			LeaveRule("PERIOD", 34);
			LeaveRule_PERIOD();
		}
	}
	// $ANTLR end "PERIOD"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 35);
		TraceIn("PLUS", 35);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:43:6: ( '+' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:43:8: '+'
			{
			DebugLocation(43, 8);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 35);
			LeaveRule("PLUS", 35);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_RBRACE();
	partial void LeaveRule_RBRACE();

	// $ANTLR start "RBRACE"
	[GrammarRule("RBRACE")]
	private void mRBRACE()
	{
		EnterRule_RBRACE();
		EnterRule("RBRACE", 36);
		TraceIn("RBRACE", 36);
		try
		{
			int _type = RBRACE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:44:8: ( '}' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:44:10: '}'
			{
			DebugLocation(44, 10);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RBRACE", 36);
			LeaveRule("RBRACE", 36);
			LeaveRule_RBRACE();
		}
	}
	// $ANTLR end "RBRACE"

	partial void EnterRule_RBRACKET();
	partial void LeaveRule_RBRACKET();

	// $ANTLR start "RBRACKET"
	[GrammarRule("RBRACKET")]
	private void mRBRACKET()
	{
		EnterRule_RBRACKET();
		EnterRule("RBRACKET", 37);
		TraceIn("RBRACKET", 37);
		try
		{
			int _type = RBRACKET;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:45:10: ( ']' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:45:12: ']'
			{
			DebugLocation(45, 12);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RBRACKET", 37);
			LeaveRule("RBRACKET", 37);
			LeaveRule_RBRACKET();
		}
	}
	// $ANTLR end "RBRACKET"

	partial void EnterRule_RPAR();
	partial void LeaveRule_RPAR();

	// $ANTLR start "RPAR"
	[GrammarRule("RPAR")]
	private void mRPAR()
	{
		EnterRule_RPAR();
		EnterRule("RPAR", 38);
		TraceIn("RPAR", 38);
		try
		{
			int _type = RPAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:46:6: ( ')' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:46:8: ')'
			{
			DebugLocation(46, 8);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RPAR", 38);
			LeaveRule("RPAR", 38);
			LeaveRule_RPAR();
		}
	}
	// $ANTLR end "RPAR"

	partial void EnterRule_SEMI();
	partial void LeaveRule_SEMI();

	// $ANTLR start "SEMI"
	[GrammarRule("SEMI")]
	private void mSEMI()
	{
		EnterRule_SEMI();
		EnterRule("SEMI", 39);
		TraceIn("SEMI", 39);
		try
		{
			int _type = SEMI;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:47:6: ( ';' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:47:8: ';'
			{
			DebugLocation(47, 8);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMI", 39);
			LeaveRule("SEMI", 39);
			LeaveRule_SEMI();
		}
	}
	// $ANTLR end "SEMI"

	partial void EnterRule_SLASH();
	partial void LeaveRule_SLASH();

	// $ANTLR start "SLASH"
	[GrammarRule("SLASH")]
	private void mSLASH()
	{
		EnterRule_SLASH();
		EnterRule("SLASH", 40);
		TraceIn("SLASH", 40);
		try
		{
			int _type = SLASH;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:48:7: ( '/' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:48:9: '/'
			{
			DebugLocation(48, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SLASH", 40);
			LeaveRule("SLASH", 40);
			LeaveRule_SLASH();
		}
	}
	// $ANTLR end "SLASH"

	partial void EnterRule_STAR();
	partial void LeaveRule_STAR();

	// $ANTLR start "STAR"
	[GrammarRule("STAR")]
	private void mSTAR()
	{
		EnterRule_STAR();
		EnterRule("STAR", 41);
		TraceIn("STAR", 41);
		try
		{
			int _type = STAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:49:6: ( '*' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:49:8: '*'
			{
			DebugLocation(49, 8);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STAR", 41);
			LeaveRule("STAR", 41);
			LeaveRule_STAR();
		}
	}
	// $ANTLR end "STAR"

	partial void EnterRule_THEN();
	partial void LeaveRule_THEN();

	// $ANTLR start "THEN"
	[GrammarRule("THEN")]
	private void mTHEN()
	{
		EnterRule_THEN();
		EnterRule("THEN", 42);
		TraceIn("THEN", 42);
		try
		{
			int _type = THEN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:50:6: ( 'then' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:50:8: 'then'
			{
			DebugLocation(50, 8);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THEN", 42);
			LeaveRule("THEN", 42);
			LeaveRule_THEN();
		}
	}
	// $ANTLR end "THEN"

	partial void EnterRule_TO();
	partial void LeaveRule_TO();

	// $ANTLR start "TO"
	[GrammarRule("TO")]
	private void mTO()
	{
		EnterRule_TO();
		EnterRule("TO", 43);
		TraceIn("TO", 43);
		try
		{
			int _type = TO;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:51:4: ( 'to' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:51:6: 'to'
			{
			DebugLocation(51, 6);
			Match("to"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TO", 43);
			LeaveRule("TO", 43);
			LeaveRule_TO();
		}
	}
	// $ANTLR end "TO"

	partial void EnterRule_TYPE();
	partial void LeaveRule_TYPE();

	// $ANTLR start "TYPE"
	[GrammarRule("TYPE")]
	private void mTYPE()
	{
		EnterRule_TYPE();
		EnterRule("TYPE", 44);
		TraceIn("TYPE", 44);
		try
		{
			int _type = TYPE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:52:6: ( 'type' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:52:8: 'type'
			{
			DebugLocation(52, 8);
			Match("type"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPE", 44);
			LeaveRule("TYPE", 44);
			LeaveRule_TYPE();
		}
	}
	// $ANTLR end "TYPE"

	partial void EnterRule_UNDERSCORE();
	partial void LeaveRule_UNDERSCORE();

	// $ANTLR start "UNDERSCORE"
	[GrammarRule("UNDERSCORE")]
	private void mUNDERSCORE()
	{
		EnterRule_UNDERSCORE();
		EnterRule("UNDERSCORE", 45);
		TraceIn("UNDERSCORE", 45);
		try
		{
			int _type = UNDERSCORE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:53:12: ( '_' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:53:14: '_'
			{
			DebugLocation(53, 14);
			Match('_'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("UNDERSCORE", 45);
			LeaveRule("UNDERSCORE", 45);
			LeaveRule_UNDERSCORE();
		}
	}
	// $ANTLR end "UNDERSCORE"

	partial void EnterRule_VAR();
	partial void LeaveRule_VAR();

	// $ANTLR start "VAR"
	[GrammarRule("VAR")]
	private void mVAR()
	{
		EnterRule_VAR();
		EnterRule("VAR", 46);
		TraceIn("VAR", 46);
		try
		{
			int _type = VAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:54:5: ( 'var' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:54:7: 'var'
			{
			DebugLocation(54, 7);
			Match("var"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VAR", 46);
			LeaveRule("VAR", 46);
			LeaveRule_VAR();
		}
	}
	// $ANTLR end "VAR"

	partial void EnterRule_WHILE();
	partial void LeaveRule_WHILE();

	// $ANTLR start "WHILE"
	[GrammarRule("WHILE")]
	private void mWHILE()
	{
		EnterRule_WHILE();
		EnterRule("WHILE", 47);
		TraceIn("WHILE", 47);
		try
		{
			int _type = WHILE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:55:7: ( 'while' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:55:9: 'while'
			{
			DebugLocation(55, 9);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHILE", 47);
			LeaveRule("WHILE", 47);
			LeaveRule_WHILE();
		}
	}
	// $ANTLR end "WHILE"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 48);
		TraceIn("DIGIT", 48);
		try
		{
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:151:3: ( '0' .. '9' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:
			{
			DebugLocation(151, 3);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 48);
			LeaveRule("DIGIT", 48);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 49);
		TraceIn("LETTER", 49);
		try
		{
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:153:3: ( 'a' .. 'z' | 'A' .. 'Z' )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:
			{
			DebugLocation(153, 3);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 49);
			LeaveRule("LETTER", 49);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_ASCII_CODE();
	partial void LeaveRule_ASCII_CODE();

	// $ANTLR start "ASCII_CODE"
	[GrammarRule("ASCII_CODE")]
	private void mASCII_CODE()
	{
		EnterRule_ASCII_CODE();
		EnterRule("ASCII_CODE", 50);
		TraceIn("ASCII_CODE", 50);
		try
		{
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:155:2: ( '0' DIGIT DIGIT | '1' ( '0' | '1' ) DIGIT | '1' '2' '0' .. '7' )
			int alt1=3;
			try { DebugEnterDecision(1, false);
			int LA1_0 = input.LA(1);

			if ((LA1_0=='0'))
			{
				alt1 = 1;
			}
			else if ((LA1_0=='1'))
			{
				int LA1_2 = input.LA(2);

				if (((LA1_2>='0' && LA1_2<='1')))
				{
					alt1 = 2;
				}
				else if ((LA1_2=='2'))
				{
					alt1 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:155:4: '0' DIGIT DIGIT
				{
				DebugLocation(155, 4);
				Match('0'); 
				DebugLocation(155, 8);
				mDIGIT(); 
				DebugLocation(155, 14);
				mDIGIT(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:155:22: '1' ( '0' | '1' ) DIGIT
				{
				DebugLocation(155, 22);
				Match('1'); 
				DebugLocation(155, 26);
				input.Consume();

				DebugLocation(155, 36);
				mDIGIT(); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:155:44: '1' '2' '0' .. '7'
				{
				DebugLocation(155, 44);
				Match('1'); 
				DebugLocation(155, 48);
				Match('2'); 
				DebugLocation(155, 52);
				MatchRange('0','7'); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("ASCII_CODE", 50);
			LeaveRule("ASCII_CODE", 50);
			LeaveRule_ASCII_CODE();
		}
	}
	// $ANTLR end "ASCII_CODE"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 51);
		TraceIn("ESC_SEQ", 51);
		try
		{
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:157:2: ( BACKSLASH ( 'n' | 'r' | 't' | '\\\"' | BACKSLASH | ASCII_CODE ) )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:157:4: BACKSLASH ( 'n' | 'r' | 't' | '\\\"' | BACKSLASH | ASCII_CODE )
			{
			DebugLocation(157, 4);
			mBACKSLASH(); 
			DebugLocation(157, 14);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:157:14: ( 'n' | 'r' | 't' | '\\\"' | BACKSLASH | ASCII_CODE )
			int alt2=6;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case 'n':
				{
				alt2 = 1;
				}
				break;
			case 'r':
				{
				alt2 = 2;
				}
				break;
			case 't':
				{
				alt2 = 3;
				}
				break;
			case '\"':
				{
				alt2 = 4;
				}
				break;
			case '\\':
				{
				alt2 = 5;
				}
				break;
			case '0':
			case '1':
				{
				alt2 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:157:15: 'n'
				{
				DebugLocation(157, 15);
				Match('n'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:157:21: 'r'
				{
				DebugLocation(157, 21);
				Match('r'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:157:27: 't'
				{
				DebugLocation(157, 27);
				Match('t'); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:157:33: '\\\"'
				{
				DebugLocation(157, 33);
				Match('\"'); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:157:40: BACKSLASH
				{
				DebugLocation(157, 40);
				mBACKSLASH(); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:157:52: ASCII_CODE
				{
				DebugLocation(157, 52);
				mASCII_CODE(); 

				}
				break;

			}
			} finally { DebugExitSubRule(2); }


			}

		}
		finally
		{
			TraceOut("ESC_SEQ", 51);
			LeaveRule("ESC_SEQ", 51);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 52);
		TraceIn("WS", 52);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:159:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:159:7: ( ' ' | '\\t' | '\\r' | '\\n' )+
			{
			DebugLocation(159, 7);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:159:7: ( ' ' | '\\t' | '\\r' | '\\n' )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='\t' && LA3_0<='\n')||LA3_0=='\r'||LA3_0==' '))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:
					{
					DebugLocation(159, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(159, 35);
			_channel = Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 52);
			LeaveRule("WS", 52);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_STRING_WS();
	partial void LeaveRule_STRING_WS();

	// $ANTLR start "STRING_WS"
	[GrammarRule("STRING_WS")]
	private void mSTRING_WS()
	{
		EnterRule_STRING_WS();
		EnterRule("STRING_WS", 53);
		TraceIn("STRING_WS", 53);
		try
		{
			int _type = STRING_WS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:161:2: ( ( BACKSLASH ( ' ' | '\\t' | '\\r' | '\\n' )+ BACKSLASH ) )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:161:4: ( BACKSLASH ( ' ' | '\\t' | '\\r' | '\\n' )+ BACKSLASH )
			{
			DebugLocation(161, 4);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:161:4: ( BACKSLASH ( ' ' | '\\t' | '\\r' | '\\n' )+ BACKSLASH )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:161:5: BACKSLASH ( ' ' | '\\t' | '\\r' | '\\n' )+ BACKSLASH
			{
			DebugLocation(161, 5);
			mBACKSLASH(); 
			DebugLocation(161, 15);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:161:15: ( ' ' | '\\t' | '\\r' | '\\n' )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>='\t' && LA4_0<='\n')||LA4_0=='\r'||LA4_0==' '))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:
					{
					DebugLocation(161, 15);
					input.Consume();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(161, 43);
			mBACKSLASH(); 

			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_WS", 53);
			LeaveRule("STRING_WS", 53);
			LeaveRule_STRING_WS();
		}
	}
	// $ANTLR end "STRING_WS"

	partial void EnterRule_STRING_CONS();
	partial void LeaveRule_STRING_CONS();

	// $ANTLR start "STRING_CONS"
	[GrammarRule("STRING_CONS")]
	private void mSTRING_CONS()
	{
		EnterRule_STRING_CONS();
		EnterRule("STRING_CONS", 54);
		TraceIn("STRING_CONS", 54);
		try
		{
			int _type = STRING_CONS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:163:3: ( DOUBLEQUOTE ( ( ' ' .. '!' ) | ( '#' .. '[' ) | ( ']' .. '~' ) | ESC_SEQ | STRING_WS )* DOUBLEQUOTE )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:163:5: DOUBLEQUOTE ( ( ' ' .. '!' ) | ( '#' .. '[' ) | ( ']' .. '~' ) | ESC_SEQ | STRING_WS )* DOUBLEQUOTE
			{
			DebugLocation(163, 5);
			mDOUBLEQUOTE(); 
			DebugLocation(163, 17);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:163:17: ( ( ' ' .. '!' ) | ( '#' .. '[' ) | ( ']' .. '~' ) | ESC_SEQ | STRING_WS )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=6;
				try { DebugEnterDecision(5, false);
				switch (input.LA(1))
				{
				case ' ':
				case '!':
					{
					alt5 = 1;
					}
					break;
				case '#':
				case '$':
				case '%':
				case '&':
				case '\'':
				case '(':
				case ')':
				case '*':
				case '+':
				case ',':
				case '-':
				case '.':
				case '/':
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
				case '8':
				case '9':
				case ':':
				case ';':
				case '<':
				case '=':
				case '>':
				case '?':
				case '@':
				case 'A':
				case 'B':
				case 'C':
				case 'D':
				case 'E':
				case 'F':
				case 'G':
				case 'H':
				case 'I':
				case 'J':
				case 'K':
				case 'L':
				case 'M':
				case 'N':
				case 'O':
				case 'P':
				case 'Q':
				case 'R':
				case 'S':
				case 'T':
				case 'U':
				case 'V':
				case 'W':
				case 'X':
				case 'Y':
				case 'Z':
				case '[':
					{
					alt5 = 2;
					}
					break;
				case ']':
				case '^':
				case '_':
				case '`':
				case 'a':
				case 'b':
				case 'c':
				case 'd':
				case 'e':
				case 'f':
				case 'g':
				case 'h':
				case 'i':
				case 'j':
				case 'k':
				case 'l':
				case 'm':
				case 'n':
				case 'o':
				case 'p':
				case 'q':
				case 'r':
				case 's':
				case 't':
				case 'u':
				case 'v':
				case 'w':
				case 'x':
				case 'y':
				case 'z':
				case '{':
				case '|':
				case '}':
				case '~':
					{
					alt5 = 3;
					}
					break;
				case '\\':
					{
					int LA5_5 = input.LA(2);

					if ((LA5_5=='\"'||(LA5_5>='0' && LA5_5<='1')||LA5_5=='\\'||LA5_5=='n'||LA5_5=='r'||LA5_5=='t'))
					{
						alt5 = 4;
					}
					else if (((LA5_5>='\t' && LA5_5<='\n')||LA5_5=='\r'||LA5_5==' '))
					{
						alt5 = 5;
					}


					}
					break;
				}

				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:163:18: ( ' ' .. '!' )
					{
					DebugLocation(163, 18);
					input.Consume();


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:163:31: ( '#' .. '[' )
					{
					DebugLocation(163, 31);
					input.Consume();


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:163:44: ( ']' .. '~' )
					{
					DebugLocation(163, 44);
					input.Consume();


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:163:57: ESC_SEQ
					{
					DebugLocation(163, 57);
					mESC_SEQ(); 

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:163:67: STRING_WS
					{
					DebugLocation(163, 67);
					mSTRING_WS(); 

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(163, 79);
			mDOUBLEQUOTE(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_CONS", 54);
			LeaveRule("STRING_CONS", 54);
			LeaveRule_STRING_CONS();
		}
	}
	// $ANTLR end "STRING_CONS"

	partial void EnterRule_INT_CONS();
	partial void LeaveRule_INT_CONS();

	// $ANTLR start "INT_CONS"
	[GrammarRule("INT_CONS")]
	private void mINT_CONS()
	{
		EnterRule_INT_CONS();
		EnterRule("INT_CONS", 55);
		TraceIn("INT_CONS", 55);
		try
		{
			int _type = INT_CONS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:165:2: ( ( DIGIT )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:165:4: ( DIGIT )+
			{
			DebugLocation(165, 4);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:165:4: ( DIGIT )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>='0' && LA6_0<='9')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:
					{
					DebugLocation(165, 4);
					input.Consume();


					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT_CONS", 55);
			LeaveRule("INT_CONS", 55);
			LeaveRule_INT_CONS();
		}
	}
	// $ANTLR end "INT_CONS"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 56);
		TraceIn("ID", 56);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:166:5: ( LETTER ( DIGIT | LETTER | UNDERSCORE )* )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:166:7: LETTER ( DIGIT | LETTER | UNDERSCORE )*
			{
			DebugLocation(166, 7);
			mLETTER(); 
			DebugLocation(166, 14);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:166:14: ( DIGIT | LETTER | UNDERSCORE )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if (((LA7_0>='0' && LA7_0<='9')||(LA7_0>='A' && LA7_0<='Z')||LA7_0=='_'||(LA7_0>='a' && LA7_0<='z')))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:
					{
					DebugLocation(166, 14);
					input.Consume();


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 56);
			LeaveRule("ID", 56);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 57);
		TraceIn("COMMENT", 57);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:167:9: ( OPEN_COMMENT ( . )* ( COMMENT ( . )* )* CLOSE_COMMENT )
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:167:11: OPEN_COMMENT ( . )* ( COMMENT ( . )* )* CLOSE_COMMENT
			{
			DebugLocation(167, 11);
			mOPEN_COMMENT(); 
			DebugLocation(167, 24);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:167:24: ( . )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0=='/'))
				{
					int LA8_1 = input.LA(2);

					if ((LA8_1=='*'))
					{
						alt8 = 2;
					}
					else if (((LA8_1>='\u0000' && LA8_1<=')')||(LA8_1>='+' && LA8_1<='\uFFFF')))
					{
						alt8 = 1;
					}


				}
				else if ((LA8_0=='*'))
				{
					int LA8_2 = input.LA(2);

					if ((LA8_2=='/'))
					{
						alt8 = 2;
					}
					else if (((LA8_2>='\u0000' && LA8_2<='.')||(LA8_2>='0' && LA8_2<='\uFFFF')))
					{
						alt8 = 1;
					}


				}
				else if (((LA8_0>='\u0000' && LA8_0<=')')||(LA8_0>='+' && LA8_0<='.')||(LA8_0>='0' && LA8_0<='\uFFFF')))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:167:24: .
					{
					DebugLocation(167, 24);
					MatchAny(); 

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(167, 27);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:167:27: ( COMMENT ( . )* )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0=='/'))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:167:28: COMMENT ( . )*
					{
					DebugLocation(167, 28);
					mCOMMENT(); 
					DebugLocation(167, 36);
					// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:167:36: ( . )*
					try { DebugEnterSubRule(9);
					while (true)
					{
						int alt9=2;
						try { DebugEnterDecision(9, false);
						int LA9_0 = input.LA(1);

						if ((LA9_0=='*'))
						{
							int LA9_1 = input.LA(2);

							if ((LA9_1=='/'))
							{
								alt9 = 2;
							}
							else if (((LA9_1>='\u0000' && LA9_1<='.')||(LA9_1>='0' && LA9_1<='\uFFFF')))
							{
								alt9 = 1;
							}


						}
						else if ((LA9_0=='/'))
						{
							int LA9_2 = input.LA(2);

							if ((LA9_2=='*'))
							{
								alt9 = 2;
							}
							else if (((LA9_2>='\u0000' && LA9_2<=')')||(LA9_2>='+' && LA9_2<='\uFFFF')))
							{
								alt9 = 1;
							}


						}
						else if (((LA9_0>='\u0000' && LA9_0<=')')||(LA9_0>='+' && LA9_0<='.')||(LA9_0>='0' && LA9_0<='\uFFFF')))
						{
							alt9 = 1;
						}


						} finally { DebugExitDecision(9); }
						switch ( alt9 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:167:36: .
							{
							DebugLocation(167, 36);
							MatchAny(); 

							}
							break;

						default:
							goto loop9;
						}
					}

					loop9:
						;

					} finally { DebugExitSubRule(9); }


					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(167, 41);
			mCLOSE_COMMENT(); 
			DebugLocation(167, 55);
			 _channel = Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 57);
			LeaveRule("COMMENT", 57);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	public override void mTokens()
	{
		// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:8: ( AND | ARRAY | ASSIGN | AT | BACKSLASH | BREAK | CARET | CLOSE_COMMENT | COLON | COMMA | DO | DOUBLEQUOTE | ELSE | END | EQUAL | FOR | FUNCTION | GEQ | GREATER | IF | IN | LBRACE | LBRACKET | LEQ | LESS | LET | LPAR | MINUS | NEQUAL | NIL | OF | OPEN_COMMENT | OR | PERIOD | PLUS | RBRACE | RBRACKET | RPAR | SEMI | SLASH | STAR | THEN | TO | TYPE | UNDERSCORE | VAR | WHILE | WS | STRING_WS | STRING_CONS | INT_CONS | ID | COMMENT )
		int alt11=53;
		try { DebugEnterDecision(11, false);
		try
		{
			alt11 = dfa11.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(11); }
		switch (alt11)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:10: AND
			{
			DebugLocation(1, 10);
			mAND(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:14: ARRAY
			{
			DebugLocation(1, 14);
			mARRAY(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:20: ASSIGN
			{
			DebugLocation(1, 20);
			mASSIGN(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:27: AT
			{
			DebugLocation(1, 27);
			mAT(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:30: BACKSLASH
			{
			DebugLocation(1, 30);
			mBACKSLASH(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:40: BREAK
			{
			DebugLocation(1, 40);
			mBREAK(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:46: CARET
			{
			DebugLocation(1, 46);
			mCARET(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:52: CLOSE_COMMENT
			{
			DebugLocation(1, 52);
			mCLOSE_COMMENT(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:66: COLON
			{
			DebugLocation(1, 66);
			mCOLON(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:72: COMMA
			{
			DebugLocation(1, 72);
			mCOMMA(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:78: DO
			{
			DebugLocation(1, 78);
			mDO(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:81: DOUBLEQUOTE
			{
			DebugLocation(1, 81);
			mDOUBLEQUOTE(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:93: ELSE
			{
			DebugLocation(1, 93);
			mELSE(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:98: END
			{
			DebugLocation(1, 98);
			mEND(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:102: EQUAL
			{
			DebugLocation(1, 102);
			mEQUAL(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:108: FOR
			{
			DebugLocation(1, 108);
			mFOR(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:112: FUNCTION
			{
			DebugLocation(1, 112);
			mFUNCTION(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:121: GEQ
			{
			DebugLocation(1, 121);
			mGEQ(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:125: GREATER
			{
			DebugLocation(1, 125);
			mGREATER(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:133: IF
			{
			DebugLocation(1, 133);
			mIF(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:136: IN
			{
			DebugLocation(1, 136);
			mIN(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:139: LBRACE
			{
			DebugLocation(1, 139);
			mLBRACE(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:146: LBRACKET
			{
			DebugLocation(1, 146);
			mLBRACKET(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:155: LEQ
			{
			DebugLocation(1, 155);
			mLEQ(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:159: LESS
			{
			DebugLocation(1, 159);
			mLESS(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:164: LET
			{
			DebugLocation(1, 164);
			mLET(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:168: LPAR
			{
			DebugLocation(1, 168);
			mLPAR(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:173: MINUS
			{
			DebugLocation(1, 173);
			mMINUS(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:179: NEQUAL
			{
			DebugLocation(1, 179);
			mNEQUAL(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:186: NIL
			{
			DebugLocation(1, 186);
			mNIL(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:190: OF
			{
			DebugLocation(1, 190);
			mOF(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:193: OPEN_COMMENT
			{
			DebugLocation(1, 193);
			mOPEN_COMMENT(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:206: OR
			{
			DebugLocation(1, 206);
			mOR(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:209: PERIOD
			{
			DebugLocation(1, 209);
			mPERIOD(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:216: PLUS
			{
			DebugLocation(1, 216);
			mPLUS(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:221: RBRACE
			{
			DebugLocation(1, 221);
			mRBRACE(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:228: RBRACKET
			{
			DebugLocation(1, 228);
			mRBRACKET(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:237: RPAR
			{
			DebugLocation(1, 237);
			mRPAR(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:242: SEMI
			{
			DebugLocation(1, 242);
			mSEMI(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:247: SLASH
			{
			DebugLocation(1, 247);
			mSLASH(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:253: STAR
			{
			DebugLocation(1, 253);
			mSTAR(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:258: THEN
			{
			DebugLocation(1, 258);
			mTHEN(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:263: TO
			{
			DebugLocation(1, 263);
			mTO(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:266: TYPE
			{
			DebugLocation(1, 266);
			mTYPE(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:271: UNDERSCORE
			{
			DebugLocation(1, 271);
			mUNDERSCORE(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:282: VAR
			{
			DebugLocation(1, 282);
			mVAR(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:286: WHILE
			{
			DebugLocation(1, 286);
			mWHILE(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:292: WS
			{
			DebugLocation(1, 292);
			mWS(); 

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:295: STRING_WS
			{
			DebugLocation(1, 295);
			mSTRING_WS(); 

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:305: STRING_CONS
			{
			DebugLocation(1, 305);
			mSTRING_CONS(); 

			}
			break;
		case 51:
			DebugEnterAlt(51);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:317: INT_CONS
			{
			DebugLocation(1, 317);
			mINT_CONS(); 

			}
			break;
		case 52:
			DebugEnterAlt(52);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:326: ID
			{
			DebugLocation(1, 326);
			mID(); 

			}
			break;
		case 53:
			DebugEnterAlt(53);
			// C:\\Users\\Laila\\Documents\\Tiger\\Tiger.g:1:329: COMMENT
			{
			DebugLocation(1, 329);
			mCOMMENT(); 

			}
			break;

		}

	}


	#region DFA
	DFA11 dfa11;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa11 = new DFA11(this, SpecialStateTransition11);
	}

	private class DFA11 : DFA
	{
		private const string DFA11_eotS =
			"\x2\xFFFF\x1\x27\x1\x2A\x1\xFFFF\x1\x2B\x1\x27\x1\xFFFF\x1\x2F\x1\xFFFF"+
			"\x1\x27\x1\x31\x1\x27\x1\xFFFF\x1\x27\x1\x38\x1\x27\x2\xFFFF\x1\x3D\x1"+
			"\x27\x2\xFFFF\x2\x27\x1\x42\x7\xFFFF\x1\x27\x1\xFFFF\x2\x27\x3\xFFFF"+
			"\x1\x27\x4\xFFFF\x1\x27\x2\xFFFF\x1\x4A\x2\xFFFF\x4\x27\x2\xFFFF\x1\x4F"+
			"\x1\x50\x3\xFFFF\x2\x27\x1\x53\x1\x54\x1\xFFFF\x1\x27\x1\x57\x5\x27\x1"+
			"\xFFFF\x1\x27\x1\x5E\x1\x5F\x1\x27\x2\xFFFF\x1\x61\x1\x62\x3\xFFFF\x1"+
			"\x27\x1\xFFFF\x1\x27\x1\x65\x3\x27\x1\x69\x2\xFFFF\x1\x27\x2\xFFFF\x1"+
			"\x6B\x1\x6C\x1\xFFFF\x1\x27\x1\x6E\x1\x6F\x1\xFFFF\x1\x27\x2\xFFFF\x1"+
			"\x71\x2\xFFFF\x1\x27\x1\xFFFF\x1\x27\x1\x74\x1\xFFFF";
		private const string DFA11_eofS =
			"\x75\xFFFF";
		private const string DFA11_minS =
			"\x1\x9\x1\xFFFF\x1\x72\x1\x3D\x1\xFFFF\x1\x9\x1\x72\x1\xFFFF\x1\x2F\x1"+
			"\xFFFF\x1\x6F\x1\x20\x1\x6C\x1\xFFFF\x1\x6F\x1\x3D\x1\x66\x2\xFFFF\x1"+
			"\x3D\x1\x65\x2\xFFFF\x1\x69\x1\x66\x1\x2A\x7\xFFFF\x1\x68\x1\xFFFF\x1"+
			"\x61\x1\x68\x3\xFFFF\x1\x72\x4\xFFFF\x1\x65\x2\xFFFF\x1\x30\x2\xFFFF"+
			"\x1\x73\x1\x64\x1\x72\x1\x6E\x2\xFFFF\x2\x30\x3\xFFFF\x1\x74\x1\x6C\x1"+
			"\x30\x1\x0\x1\xFFFF\x1\x65\x1\x30\x1\x70\x1\x72\x1\x69\x2\x61\x1\xFFFF"+
			"\x1\x65\x2\x30\x1\x63\x2\xFFFF\x2\x30\x3\xFFFF\x1\x6E\x1\xFFFF\x1\x65"+
			"\x1\x30\x1\x6C\x1\x79\x1\x6B\x1\x30\x2\xFFFF\x1\x74\x2\xFFFF\x2\x30\x1"+
			"\xFFFF\x1\x65\x2\x30\x1\xFFFF\x1\x69\x2\xFFFF\x1\x30\x2\xFFFF\x1\x6F"+
			"\x1\xFFFF\x1\x6E\x1\x30\x1\xFFFF";
		private const string DFA11_maxS =
			"\x1\x7D\x1\xFFFF\x1\x72\x1\x3D\x1\xFFFF\x1\x20\x1\x72\x1\xFFFF\x1\x2F"+
			"\x1\xFFFF\x1\x6F\x1\x7E\x1\x6E\x1\xFFFF\x1\x75\x1\x3D\x1\x6E\x2\xFFFF"+
			"\x1\x3E\x1\x65\x2\xFFFF\x1\x69\x1\x66\x1\x2A\x7\xFFFF\x1\x79\x1\xFFFF"+
			"\x1\x61\x1\x68\x3\xFFFF\x1\x72\x4\xFFFF\x1\x65\x2\xFFFF\x1\x7A\x2\xFFFF"+
			"\x1\x73\x1\x64\x1\x72\x1\x6E\x2\xFFFF\x2\x7A\x3\xFFFF\x1\x74\x1\x6C\x1"+
			"\x7A\x1\xFFFF\x1\xFFFF\x1\x65\x1\x7A\x1\x70\x1\x72\x1\x69\x2\x61\x1\xFFFF"+
			"\x1\x65\x2\x7A\x1\x63\x2\xFFFF\x2\x7A\x3\xFFFF\x1\x6E\x1\xFFFF\x1\x65"+
			"\x1\x7A\x1\x6C\x1\x79\x1\x6B\x1\x7A\x2\xFFFF\x1\x74\x2\xFFFF\x2\x7A\x1"+
			"\xFFFF\x1\x65\x2\x7A\x1\xFFFF\x1\x69\x2\xFFFF\x1\x7A\x2\xFFFF\x1\x6F"+
			"\x1\xFFFF\x1\x6E\x1\x7A\x1\xFFFF";
		private const string DFA11_acceptS =
			"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x4\x2\xFFFF\x1\x7\x1\xFFFF\x1\xA\x3\xFFFF"+
			"\x1\xF\x3\xFFFF\x1\x16\x1\x17\x2\xFFFF\x1\x1B\x1\x1C\x3\xFFFF\x1\x21"+
			"\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\xFFFF\x1\x2D\x2\xFFFF\x1"+
			"\x30\x1\x33\x1\x34\x1\xFFFF\x1\x3\x1\x9\x1\x5\x1\x31\x1\xFFFF\x1\x8\x1"+
			"\x29\x1\xFFFF\x1\xC\x1\x32\x4\xFFFF\x1\x12\x1\x13\x2\xFFFF\x1\x18\x1"+
			"\x1D\x1\x19\x4\xFFFF\x1\x28\x7\xFFFF\x1\xB\x4\xFFFF\x1\x14\x1\x15\x2"+
			"\xFFFF\x1\x1F\x1\x20\x1\x35\x1\xFFFF\x1\x2B\x6\xFFFF\x1\xE\x1\x10\x1"+
			"\xFFFF\x1\x1A\x1\x1E\x2\xFFFF\x1\x2E\x3\xFFFF\x1\xD\x1\xFFFF\x1\x2A\x1"+
			"\x2C\x1\xFFFF\x1\x2\x1\x6\x1\xFFFF\x1\x2F\x2\xFFFF\x1\x11";
		private const string DFA11_specialS =
			"\x41\xFFFF\x1\x0\x33\xFFFF}>";
		private static readonly string[] DFA11_transitionS =
			{
				"\x2\x25\x2\xFFFF\x1\x25\x12\xFFFF\x1\x25\x1\xFFFF\x1\xB\x3\xFFFF\x1"+
				"\x1\x1\xFFFF\x1\x15\x1\x1F\x1\x8\x1\x1C\x1\x9\x1\x16\x1\x1B\x1\x19\xA"+
				"\x26\x1\x3\x1\x20\x1\x13\x1\xD\x1\xF\x1\xFFFF\x1\x4\x1A\x27\x1\x12\x1"+
				"\x5\x1\x1E\x1\x7\x1\x22\x1\xFFFF\x1\x2\x1\x6\x1\x27\x1\xA\x1\xC\x1\xE"+
				"\x2\x27\x1\x10\x2\x27\x1\x14\x1\x27\x1\x17\x1\x18\x4\x27\x1\x21\x1\x27"+
				"\x1\x23\x1\x24\x3\x27\x1\x11\x1\x1A\x1\x1D",
				"",
				"\x1\x28",
				"\x1\x29",
				"",
				"\x2\x2C\x2\xFFFF\x1\x2C\x12\xFFFF\x1\x2C",
				"\x1\x2D",
				"",
				"\x1\x2E",
				"",
				"\x1\x30",
				"\x5F\x32",
				"\x1\x33\x1\xFFFF\x1\x34",
				"",
				"\x1\x35\x5\xFFFF\x1\x36",
				"\x1\x37",
				"\x1\x39\x7\xFFFF\x1\x3A",
				"",
				"",
				"\x1\x3B\x1\x3C",
				"\x1\x3E",
				"",
				"",
				"\x1\x3F",
				"\x1\x40",
				"\x1\x41",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x43\x6\xFFFF\x1\x44\x9\xFFFF\x1\x45",
				"",
				"\x1\x46",
				"\x1\x47",
				"",
				"",
				"",
				"\x1\x48",
				"",
				"",
				"",
				"",
				"\x1\x49",
				"",
				"",
				"\xA\x27\x7\xFFFF\x1A\x27\x4\xFFFF\x1\x27\x1\xFFFF\x1A\x27",
				"",
				"",
				"\x1\x4B",
				"\x1\x4C",
				"\x1\x4D",
				"\x1\x4E",
				"",
				"",
				"\xA\x27\x7\xFFFF\x1A\x27\x4\xFFFF\x1\x27\x1\xFFFF\x1A\x27",
				"\xA\x27\x7\xFFFF\x1A\x27\x4\xFFFF\x1\x27\x1\xFFFF\x1A\x27",
				"",
				"",
				"",
				"\x1\x51",
				"\x1\x52",
				"\xA\x27\x7\xFFFF\x1A\x27\x4\xFFFF\x1\x27\x1\xFFFF\x1A\x27",
				"\x0\x55",
				"",
				"\x1\x56",
				"\xA\x27\x7\xFFFF\x1A\x27\x4\xFFFF\x1\x27\x1\xFFFF\x1A\x27",
				"\x1\x58",
				"\x1\x59",
				"\x1\x5A",
				"\x1\x5B",
				"\x1\x5C",
				"",
				"\x1\x5D",
				"\xA\x27\x7\xFFFF\x1A\x27\x4\xFFFF\x1\x27\x1\xFFFF\x1A\x27",
				"\xA\x27\x7\xFFFF\x1A\x27\x4\xFFFF\x1\x27\x1\xFFFF\x1A\x27",
				"\x1\x60",
				"",
				"",
				"\xA\x27\x7\xFFFF\x1A\x27\x4\xFFFF\x1\x27\x1\xFFFF\x1A\x27",
				"\xA\x27\x7\xFFFF\x1A\x27\x4\xFFFF\x1\x27\x1\xFFFF\x1A\x27",
				"",
				"",
				"",
				"\x1\x63",
				"",
				"\x1\x64",
				"\xA\x27\x7\xFFFF\x1A\x27\x4\xFFFF\x1\x27\x1\xFFFF\x1A\x27",
				"\x1\x66",
				"\x1\x67",
				"\x1\x68",
				"\xA\x27\x7\xFFFF\x1A\x27\x4\xFFFF\x1\x27\x1\xFFFF\x1A\x27",
				"",
				"",
				"\x1\x6A",
				"",
				"",
				"\xA\x27\x7\xFFFF\x1A\x27\x4\xFFFF\x1\x27\x1\xFFFF\x1A\x27",
				"\xA\x27\x7\xFFFF\x1A\x27\x4\xFFFF\x1\x27\x1\xFFFF\x1A\x27",
				"",
				"\x1\x6D",
				"\xA\x27\x7\xFFFF\x1A\x27\x4\xFFFF\x1\x27\x1\xFFFF\x1A\x27",
				"\xA\x27\x7\xFFFF\x1A\x27\x4\xFFFF\x1\x27\x1\xFFFF\x1A\x27",
				"",
				"\x1\x70",
				"",
				"",
				"\xA\x27\x7\xFFFF\x1A\x27\x4\xFFFF\x1\x27\x1\xFFFF\x1A\x27",
				"",
				"",
				"\x1\x72",
				"",
				"\x1\x73",
				"\xA\x27\x7\xFFFF\x1A\x27\x4\xFFFF\x1\x27\x1\xFFFF\x1A\x27",
				""
			};

		private static readonly short[] DFA11_eot = DFA.UnpackEncodedString(DFA11_eotS);
		private static readonly short[] DFA11_eof = DFA.UnpackEncodedString(DFA11_eofS);
		private static readonly char[] DFA11_min = DFA.UnpackEncodedStringToUnsignedChars(DFA11_minS);
		private static readonly char[] DFA11_max = DFA.UnpackEncodedStringToUnsignedChars(DFA11_maxS);
		private static readonly short[] DFA11_accept = DFA.UnpackEncodedString(DFA11_acceptS);
		private static readonly short[] DFA11_special = DFA.UnpackEncodedString(DFA11_specialS);
		private static readonly short[][] DFA11_transition;

		static DFA11()
		{
			int numStates = DFA11_transitionS.Length;
			DFA11_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA11_transition[i] = DFA.UnpackEncodedString(DFA11_transitionS[i]);
			}
		}

		public DFA11( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 11;
			this.eot = DFA11_eot;
			this.eof = DFA11_eof;
			this.min = DFA11_min;
			this.max = DFA11_max;
			this.accept = DFA11_accept;
			this.special = DFA11_special;
			this.transition = DFA11_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( AND | ARRAY | ASSIGN | AT | BACKSLASH | BREAK | CARET | CLOSE_COMMENT | COLON | COMMA | DO | DOUBLEQUOTE | ELSE | END | EQUAL | FOR | FUNCTION | GEQ | GREATER | IF | IN | LBRACE | LBRACKET | LEQ | LESS | LET | LPAR | MINUS | NEQUAL | NIL | OF | OPEN_COMMENT | OR | PERIOD | PLUS | RBRACE | RBRACKET | RPAR | SEMI | SLASH | STAR | THEN | TO | TYPE | UNDERSCORE | VAR | WHILE | WS | STRING_WS | STRING_CONS | INT_CONS | ID | COMMENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition11(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA11_65 = input.LA(1);

				s = -1;
				if (((LA11_65>='\u0000' && LA11_65<='\uFFFF'))) {s = 85;}

				else s = 84;

				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 11, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
 
	#endregion

}

} // namespace Syntaxis
